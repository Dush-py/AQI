# -*- coding: utf-8 -*-
"""India Air Quality Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vYrO7fT6Y81guCIFD4ewx7wYXjyZshtB
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression,Lasso,Ridge
from sklearn.metrics import accuracy_score
from sklearn.metrics import r2_score

df=pd.read_csv('city_day.csv')
df.head()

df.isnull().sum()

df.shape

print(df['PM2.5'].mean())
print(df['PM10'].mean())
print(df['NO'].mean())
print(df['NO2'].mean())
print(df['NOx'].mean())
print(df['NH3'].mean())
print(df['CO'].mean())
print(df['SO2'].mean())
print(df['O3'].mean())
print(df['Benzene'].mean())
print(df['Toluene'].mean())
print(df['Xylene'].mean())
print(df['AQI'].mean())

df['PM2.5'].fillna(df['PM2.5'].mean(),inplace=True)
df['PM10'].fillna(df['PM10'].mean(),inplace=True)
df['NO'].fillna(df['NO'].mean(),inplace=True)
df['NO2'].fillna(df['NO2'].mean(),inplace=True)
df['NOx'].fillna(df['NOx'].mean(),inplace=True)
df['NH3'].fillna(df['NH3'].mean(),inplace=True)
df['CO'].fillna(df['CO'].mean(),inplace=True)
df['SO2'].fillna(df['SO2'].mean(),inplace=True)
df['O3'].fillna(df['O3'].mean(),inplace=True)
df['Benzene'].fillna(df['Benzene'].mean(),inplace=True)
df['Toluene'].fillna(df['Toluene'].mean(),inplace=True)
df['Xylene'].fillna(df['Xylene'].mean(),inplace=True)
df['AQI'].fillna(df['AQI'].mean(),inplace=True)

df.isnull().sum()

df.drop(['Date','City'],axis=1,inplace=True)

df.head()

X=df.iloc[:,:-1].values
y=df.iloc[:,-1].values

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=1)

X_train.shape,X_test.shape,y_train.shape,y_test.shape

linear_regressor=LinearRegression()

linear_regressor.fit(X_train,y_train)

y_pred_lr=linear_regressor.predict(X_test)

r2_score(y_test,y_pred_lr.round(2))

ridge_regressor=Ridge()

ridge_regressor.fit(X_train,y_train)

y_pred_rr=ridge_regressor.predict(X_test)

r2_score(y_test,y_pred_rr)

lasso_regressor=Lasso()

lasso_regressor.fit(X_train,y_train)

y_pred_lasso=lasso_regressor.predict(X_test)

r2_score(y_test,y_pred_lasso)

import pickle

pickle.dump(linear_regressor,open('AQI_model.pkl','wb'))

